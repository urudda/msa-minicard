spring.application.name=minibank-customer

server.port = 8076
server.servlet.context-path = /minibank

#postreSQL
spring.datasource.driverClassName = net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url = jdbc:log4jdbc:postgresql://${POSTGRES}:5432/customer
spring.datasource.username = postgres
spring.datasource.password = admin1234

# Accont API URL
account.api.url = http://${ACCOUNT}:8075/minibank/account

# Transfer API URL
transfer.api.url = http://${TRANSFER}:8074/minibank/transfer

#########################################################################################
# hystrix
# If you do not assign command key, Hystrix use 'default' as a key.
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
hystrix.command.retrieveCustomer.execution.isolation.thread.timeoutInMilliseconds=10000
#hystrix.command.retrieveCustomer.metrics.rollingStats.timeInMilliseconds = 10000 
#hystrix.command.retrieveCustomer.circuitBreaker.requestVolumeThreshold = 20
#hystrix.command.retrieveCustomer.circuitBreaker.errorThresholdPercentage = 50
#hystrix.command.retrieveCustomer.circuitBreaker.sleepWindowInMilliseconds = 5000

#ribbon
minibank-transfer.ribbon.eureka.enabled = true
# eureka에 등록될때는 listOfServers 항목은 주석 처리 할 것(리본이 알아서 담당)
minibank-transfer.ribbon.ServerListRefreshInterval=15000
minibank-transfer.ribbon.MaxAutoRetries= 0

minibank-account.ribbon.eureka.enabled = true
# eureka에 등록될때는 listOfServers 항목은 주석 처리 할 것(리본이 알아서 담당)
#minibank-customer.ribbon.listOfServers=localhost:8076,localhost:9076
minibank-account.ribbon.ServerListRefreshInterval=15000
minibank-account.ribbon.MaxAutoRetries= 0


#eureka
# Eureka Server에 IP로 서비스 등록
eureka.instance.prefer-ip-address= true 
# Eureka Server 주소 입력
eureka.client.service-url.defaultZone= http://${EUREKA}:8761/eureka

kafka.bootstrapAddress=localhost:9092
creating.customer.topic.name=creating-customer